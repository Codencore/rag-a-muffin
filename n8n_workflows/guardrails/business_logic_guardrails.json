{
  "name": "Business_Logic_Guardrails_Template",
  "description": "Template per implementare guardrails di business logic",
  "components": [
    {
      "name": "Data_Freshness_Check",
      "type": "code",
      "parameters": {
        "jsCode": "// Guardrail: Data Freshness Check\nconst dataTimestamp = $json.data_timestamp || '';\nconst maxAgeHours = 24;\n\nif (!dataTimestamp) {\n  throw new Error('Data timestamp is required');\n}\n\nconst dataTime = new Date(dataTimestamp);\nconst now = new Date();\nconst ageHours = (now - dataTime) / (1000 * 60 * 60);\n\nif (ageHours > maxAgeHours) {\n  return [{\n    json: {\n      data_fresh: false,\n      age_hours: ageHours,\n      max_age_hours: maxAgeHours,\n      warning: 'Data is stale - consider refreshing'\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    data_fresh: true,\n    age_hours: ageHours,\n    max_age_hours: maxAgeHours\n  }\n}];"
      }
    },
    {
      "name": "Query_Relevance_Check",
      "type": "code",
      "parameters": {
        "jsCode": "// Guardrail: Query Relevance Check\nconst query = $json.query || '';\nconst businessContext = $json.business_context || 'commercial';\n\n// Define relevant keywords per business context\nconst relevanceKeywords = {\n  commercial: [\n    'sales', 'revenue', 'performance', 'quota', 'target',\n    'commission', 'pipeline', 'conversion', 'roi', 'margin',\n    'profit', 'customer', 'deal', 'forecast', 'budget'\n  ],\n  financial: [\n    'finance', 'accounting', 'budget', 'cost', 'expense',\n    'revenue', 'profit', 'loss', 'cash', 'flow'\n  ],\n  operational: [\n    'process', 'efficiency', 'productivity', 'quality',\n    'capacity', 'utilization', 'throughput', 'delivery'\n  ]\n};\n\nconst keywords = relevanceKeywords[businessContext] || [];\nconst queryLower = query.toLowerCase();\n\nconst relevantKeywords = keywords.filter(keyword => \n  queryLower.includes(keyword)\n);\n\nconst relevanceScore = relevantKeywords.length / keywords.length;\nconst isRelevant = relevanceScore >= 0.1; // At least 10% keyword match\n\nif (!isRelevant) {\n  return [{\n    json: {\n      query_relevant: false,\n      relevance_score: relevanceScore,\n      business_context: businessContext,\n      suggestion: `Query might not be relevant to ${businessContext} context. Consider including terms like: ${keywords.slice(0, 5).join(', ')}`\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    query_relevant: true,\n    relevance_score: relevanceScore,\n    matched_keywords: relevantKeywords,\n    business_context: businessContext\n  }\n}];"
      }
    },
    {
      "name": "Performance_Monitoring",
      "type": "code",
      "parameters": {
        "jsCode": "// Guardrail: Performance Monitoring\nconst startTime = $json.start_time || Date.now();\nconst currentTime = Date.now();\nconst executionTime = currentTime - startTime;\n\nconst thresholds = {\n  warning: 3000,  // 3 seconds\n  critical: 10000, // 10 seconds\n  timeout: 30000   // 30 seconds\n};\n\nlet status = 'ok';\nlet message = 'Performance within acceptable limits';\n\nif (executionTime > thresholds.timeout) {\n  status = 'timeout';\n  message = 'Execution timeout - terminating';\n  throw new Error(message);\n} else if (executionTime > thresholds.critical) {\n  status = 'critical';\n  message = 'Critical performance threshold exceeded';\n} else if (executionTime > thresholds.warning) {\n  status = 'warning';\n  message = 'Performance warning threshold exceeded';\n}\n\n// Log performance metrics\nconst performanceData = {\n  execution_time_ms: executionTime,\n  status: status,\n  message: message,\n  thresholds: thresholds,\n  timestamp: new Date().toISOString()\n};\n\n// If performance is degraded, trigger escalation\nif (status === 'critical') {\n  // This would typically trigger an alert workflow\n  performanceData.escalation_required = true;\n}\n\nreturn [{\n  json: performanceData\n}];"
      }
    },
    {
      "name": "Human_Intervention_Check",
      "type": "code",
      "parameters": {
        "jsCode": "// Guardrail: Human Intervention Check\nconst confidence = $json.confidence || 0;\nconst complexity = $json.complexity || 'low';\nconst businessImpact = $json.business_impact || 'low';\nconst dataQuality = $json.data_quality || 1.0;\n\n// Define thresholds for human intervention\nconst thresholds = {\n  min_confidence: 0.8,\n  high_complexity: ['high', 'critical'],\n  high_business_impact: ['high', 'critical'],\n  min_data_quality: 0.9\n};\n\nconst interventionReasons = [];\n\n// Check confidence level\nif (confidence < thresholds.min_confidence) {\n  interventionReasons.push(`Low confidence: ${confidence} < ${thresholds.min_confidence}`);\n}\n\n// Check complexity\nif (thresholds.high_complexity.includes(complexity)) {\n  interventionReasons.push(`High complexity: ${complexity}`);\n}\n\n// Check business impact\nif (thresholds.high_business_impact.includes(businessImpact)) {\n  interventionReasons.push(`High business impact: ${businessImpact}`);\n}\n\n// Check data quality\nif (dataQuality < thresholds.min_data_quality) {\n  interventionReasons.push(`Low data quality: ${dataQuality} < ${thresholds.min_data_quality}`);\n}\n\nconst requiresIntervention = interventionReasons.length > 0;\n\nif (requiresIntervention) {\n  return [{\n    json: {\n      human_intervention_required: true,\n      reasons: interventionReasons,\n      confidence: confidence,\n      complexity: complexity,\n      business_impact: businessImpact,\n      data_quality: dataQuality,\n      recommendation: 'Escalate to human for review before proceeding'\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    human_intervention_required: false,\n    confidence: confidence,\n    complexity: complexity,\n    business_impact: businessImpact,\n    data_quality: dataQuality,\n    status: 'Automated processing approved'\n  }\n}];"
      }
    },
    {
      "name": "Business_Rules_Validation",
      "type": "code",
      "parameters": {
        "jsCode": "// Guardrail: Business Rules Validation\nconst salesData = $json.sales_data || {};\nconst agentId = salesData.agent_id || '';\nconst amount = salesData.amount || 0;\nconst date = salesData.date || '';\n\nconst validationErrors = [];\nconst businessRules = {\n  max_single_sale: 1000000,    // $1M max per transaction\n  min_sale_amount: 1,          // Minimum $1\n  max_daily_sales: 5000000,    // $5M max per day per agent\n  valid_date_range: 365        // Sales can't be older than 365 days\n};\n\n// Validate amount\nif (amount < businessRules.min_sale_amount) {\n  validationErrors.push(`Sale amount too low: $${amount} < $${businessRules.min_sale_amount}`);\n}\n\nif (amount > businessRules.max_single_sale) {\n  validationErrors.push(`Sale amount too high: $${amount} > $${businessRules.max_single_sale}`);\n}\n\n// Validate date\nif (date) {\n  const saleDate = new Date(date);\n  const now = new Date();\n  const daysDiff = (now - saleDate) / (1000 * 60 * 60 * 24);\n  \n  if (daysDiff > businessRules.valid_date_range) {\n    validationErrors.push(`Sale date too old: ${daysDiff} days > ${businessRules.valid_date_range} days`);\n  }\n  \n  if (saleDate > now) {\n    validationErrors.push(`Sale date in future: ${date}`);\n  }\n}\n\n// Validate agent ID format\nif (agentId && !/^[A-Z]{2}\\d{4}$/.test(agentId)) {\n  validationErrors.push(`Invalid agent ID format: ${agentId} (expected: XX0000)`);\n}\n\nif (validationErrors.length > 0) {\n  throw new Error(`Business rules validation failed: ${validationErrors.join(', ')}`);\n}\n\nreturn [{\n  json: {\n    validation_passed: true,\n    sales_data: salesData,\n    business_rules_applied: Object.keys(businessRules),\n    validated_at: new Date().toISOString()\n  }\n}];"
      }
    }
  ],\n  "usage_example": {\n    "description": "Come utilizzare i guardrails di business logic in un workflow",\n    "workflow_snippet": {\n      "nodes": [\n        {\n          "name": "Apply_Business_Guardrails",\n          "type": "n8n-nodes-base.code",\n          "parameters": {\n            "jsCode": "// Applica tutti i guardrails di business logic\\nconst data = $json;\\n\\n// 1. Data Freshness Check\\n// [Insert Data_Freshness_Check code here]\\n\\n// 2. Query Relevance Check\\n// [Insert Query_Relevance_Check code here]\\n\\n// 3. Performance Monitoring\\n// [Insert Performance_Monitoring code here]\\n\\n// 4. Business Rules Validation\\n// [Insert Business_Rules_Validation code here]\\n\\nreturn [{json: {processed_data: data, business_validation_passed: true}}];"\n          }\n        }\n      ]\n    }\n  }\n}